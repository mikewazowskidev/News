name: Google News RSS Parser

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  parse-rss:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Parse RSS feeds and create README
        run: |
          # Function to fetch and parse RSS feeds
          fetch_and_parse_rss() {
            local topic="$1"
            local url="$2"
            local output_section=""
            local current_time=$(date +%s)
            local one_day_ago=$((current_time - 86400))
            
            echo "Fetching RSS feed for $topic..."
            
            # Fetch the RSS feed
            local feed_content=$(curl -s "$url")
            
            # Create section header
            output_section+="## $topic\n\n"
            output_section+="*Last updated: $(date -u)*\n\n"
            
            # Count to track if we found any recent articles
            local article_count=0
            
            # Extract items with pubDate in the last 24 hours
            echo "$feed_content" | grep -E '<item>|<title>|<link>|<pubDate>|<description>|</item>' | while read -r line; do
              if [[ "$line" == *"<item>"* ]]; then
                title=""
                link=""
                pubDate=""
                description=""
                item_start=true
              elif [[ "$line" == *"<title>"* && "$title" == "" && "$item_start" == true ]]; then
                title=$(echo "$line" | sed -E 's/.*<title>(.*)<\/title>.*/\1/')
              elif [[ "$line" == *"<link>"* && "$link" == "" && "$item_start" == true ]]; then
                link=$(echo "$line" | sed -E 's/.*<link>(.*)<\/link>.*/\1/')
              elif [[ "$line" == *"<pubDate>"* && "$pubDate" == "" && "$item_start" == true ]]; then
                pubDate=$(echo "$line" | sed -E 's/.*<pubDate>(.*)<\/pubDate>.*/\1/')
                # Convert pubDate to timestamp for comparison
                pub_timestamp=$(date -d "$pubDate" +%s 2>/dev/null)
                if [ -z "$pub_timestamp" ]; then
                  # Try an alternative date format if the first one fails
                  pub_timestamp=$(date -d "$(echo $pubDate | sed 's/GMT/+0000/')" +%s 2>/dev/null)
                fi
              elif [[ "$line" == *"<description>"* && "$description" == "" && "$item_start" == true ]]; then
                description=$(echo "$line" | sed -E 's/.*<description>(.*)<\/description>.*/\1/')
                # Clean up HTML from description
                description=$(echo "$description" | sed -e 's/<[^>]*>//g' | sed -e 's/&nbsp;/ /g' | sed -e 's/&quot;/"/g' | sed -e 's/&amp;/\&/g' | sed -e 's/&lt;/</g' | sed -e 's/&gt;/>/g')
                # Limit description length
                if [ ${#description} -gt 250 ]; then
                  description="${description:0:247}..."
                fi
              elif [[ "$line" == *"</item>"* && "$item_start" == true ]]; then
                # Only include items from the last 24 hours
                if [ ! -z "$pub_timestamp" ] && [ $pub_timestamp -ge $one_day_ago ]; then
                  output_section+="- **[$title]($link)** - $description\n\n"
                  article_count=$((article_count + 1))
                fi
                item_start=false
              fi
            done
            
            # If no articles found, add a message
            if [ $article_count -eq 0 ]; then
              output_section+="*No articles published in the last 24 hours*\n\n"
            fi
            
            echo -e "$output_section"
          }
          
          # Create README header
          cat > README.md << EOF
          # News Tracker
          
          Automatically fetched Google News RSS feeds, showing articles from the last 24 hours.
          
          Last updated: $(date -u)
          
          EOF
          
          # Define topics and their RSS feed URLs
          declare -A topics=(
            ["Artificial Intelligence"]="https://news.google.com/rss/search?q=artificial+intelligence&hl=en-US&gl=US&ceid=US:en"
            ["Machine Learning"]="https://news.google.com/rss/search?q=machine+learning&hl=en-US&gl=US&ceid=US:en"
            ["Data Science"]="https://news.google.com/rss/search?q=data+science&hl=en-US&gl=US&ceid=US:en"
            ["Cloud Computing"]="https://news.google.com/rss/search?q=cloud+computing&hl=en-US&gl=US&ceid=US:en"
            ["Blockchain"]="https://news.google.com/rss/search?q=blockchain&hl=en-US&gl=US&ceid=US:en"
            ["Cybersecurity"]="https://news.google.com/rss/search?q=cybersecurity&hl=en-US&gl=US&ceid=US:en"
            ["Quantum Computing"]="https://news.google.com/rss/search?q=quantum+computing&hl=en-US&gl=US&ceid=US:en"
            ["Virtual Reality"]="https://news.google.com/rss/search?q=virtual+reality&hl=en-US&gl=US&ceid=US:en"
          )
          
          # Fetch and parse each RSS feed
          for topic in "${!topics[@]}"; do
            echo "Processing $topic..."
            section=$(fetch_and_parse_rss "$topic" "${topics[$topic]}")
            echo -e "$section" >> README.md
          done
          
          # Add footer
          cat >> README.md << EOF
          
          ---
          
          This README is automatically updated every 6 hours via GitHub Actions.
          EOF

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "Update news: $(date +'%Y-%m-%d %H:%M:%S')"
          git push
