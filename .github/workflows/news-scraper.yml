name: Google News RSS Parser

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  parse-rss:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install feedparser python-dateutil

      - name: Create Python script
        run: |
          cat > parse_rss.py << 'EOF'
          import feedparser
          import datetime
          import re
          from dateutil import parser as date_parser
          
          # Custom topics focused on cybersecurity and related fields
          topics = {
              "China Cyber": "https://news.google.com/rss/search?q=china+cyber+attack&hl=en-US&gl=US&ceid=US:en",
              "Russian Cyber": "https://news.google.com/rss/search?q=russia+cyber+attack&hl=en-US&gl=US&ceid=US:en",
              "Iranian Cyber": "https://news.google.com/rss/search?q=iran+cyber+attack&hl=en-US&gl=US&ceid=US:en",
              "CVEs": "https://news.google.com/rss/search?q=cve+vulnerability&hl=en-US&gl=US&ceid=US:en",
              "POC Exploits": "https://news.google.com/rss/search?q=proof+of+concept+exploit&hl=en-US&gl=US&ceid=US:en",
              "Exploited Vulnerabilities": "https://news.google.com/rss/search?q=exploited+vulnerability&hl=en-US&gl=US&ceid=US:en",
              "Satellites": "https://news.google.com/rss/search?q=satellite+cybersecurity&hl=en-US&gl=US&ceid=US:en",
              "Cyber Attacks": "https://news.google.com/rss/search?q=major+cyber+attack&hl=en-US&gl=US&ceid=US:en",
              "Crypto Security": "https://news.google.com/rss/search?q=cryptocurrency+security&hl=en-US&gl=US&ceid=US:en",
              "Quantum Computing": "https://news.google.com/rss/search?q=quantum+computing+security&hl=en-US&gl=US&ceid=US:en",
              "Espionage": "https://news.google.com/rss/search?q=cyber+espionage&hl=en-US&gl=US&ceid=US:en"
          }
          
          # Function to clean HTML from text
          def clean_html(html_text):
              # Remove HTML tags
              clean_text = re.sub(r'<[^>]+>', '', html_text)
              
              # Replace HTML entities
              entities = {
                  '&nbsp;': ' ',
                  '&quot;': '"',
                  '&amp;': '&',
                  '&lt;': '<',
                  '&gt;': '>',
                  '&apos;': "'",
                  '&#39;': "'",
                  '&mdash;': "â€”"
              }
              
              for entity, replacement in entities.items():
                  clean_text = clean_text.replace(entity, replacement)
              
              return clean_text.strip()
          
          # Create README content
          readme_content = f"""# Cybersecurity News Tracker

Last updated: {datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}
""
          
          # Process each topic
          for topic, url in topics.items():
              print(f"Processing {topic}")
              
              # Add topic header
              readme_content += f"\n## {topic}\n\n"
              
              try:
                  # Parse the feed
                  feed = feedparser.parse(url)
                  
                  # Limit to 5 entries maximum for cleaner look
                  entries = feed.entries[:5]
                  
                  # Add entries to README
                  if entries:
                      for entry in entries:
                          # Get title and link
                          title = entry.title.replace(' - ', ': ').split(' | ')[0].strip()
                          link = entry.link
                          
                          # Get source if available
                          source = ""
                          if hasattr(entry, 'source'):
                              if hasattr(entry.source, 'title'):
                                  source = f" ({entry.source.title})"
                          
                          # Get description
                          description = ""
                          if hasattr(entry, 'description'):
                              description = entry.description
                          elif hasattr(entry, 'summary'):
                              description = entry.summary
                          
                          # Clean up description
                          description = clean_html(description)
                          
                          # Limit description length for cleaner look
                          if len(description) > 200:
                              # Try to end at a sentence or comma
                              cutoff = min(200, len(description))
                              period_pos = description.rfind('. ', 0, cutoff)
                              comma_pos = description.rfind(', ', 0, cutoff)
                              
                              if period_pos > 0:
                                  description = description[:period_pos+1]
                              elif comma_pos > 0:
                                  description = description[:comma_pos+1]
                              else:
                                  description = description[:cutoff] + "..."
                          
                          # Add entry to README with a cleaner format
                          readme_content += f"* **[{title}]({link})**{source}\n  {description}\n\n"
                  else:
                      readme_content += "*No recent articles found*\n\n"
              
              except Exception as e:
                  readme_content += f"*Error processing feed: {str(e)}*\n\n"
          
          # Add footer
          readme_content += """---

*Automatically updated every 6 hours via GitHub Actions*"""
          
          # Write README
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(readme_content)
          
          print("README updated successfully!")
          EOF

      - name: Run Python script
        run: python parse_rss.py

      - name: Commit and push changes with force
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "Update cybersecurity news: $(date +'%Y-%m-%d %H:%M:%S')"
          git push --force origin main
